* 例

N = 4
K = 6
A = 20 25 30 100

支払う金額としてあり得るものを並べていこう

1個だけ買う
20
25
30
100

2個買う
40
45
50
120
50
55
150
130

これをソートして、小さい方から6番目は 50.
列挙するには N.combination(1) + N.combination(2) + N.combination(3) + ... となり凄まじい計算量になる。
安いものを必ず発見しなければならないのでコンビネーション要素のどこを掘り下げるというふうに固定するのも厳しい。
しかも無限探索になるので、したからK個を見つけたところで打ち切りできる仕組みでなければならない。
同じ金額になる買い方は重複しないとのこと。
K=20000 という恐ろしい数値のこともあるようだ。少なくとも安い方から20000通りの買い方を見つけなければならない。

* どうやって解くか

動的計画法っぽい感じがする。途中計算をそのまま生かせるところがそれっぽい。
求めたいのは、合計買い物金額

|     |  1 |  2 |  3 | ... | N |
|-----+----+----+----+-----+---|
|   0 | 20 | 30 | 50 |     |   |
|  20 | 40 | 50 |    |     |   |
|  30 |    |    |    |     |   |
|  50 |    |    |    |     |   |
| ... |    |    |    |     |   |

たての列追加を、2分探索でやるようにして埋めてあげるとある程度効率よくできる気がする。
小さいのを掘りまくることもできる。

ただ、最小の20000 を計算し切ったかという判定がむずい。
たとえば表の構成が

|     | 1 | 2 |    3 |
|-----+---+---+------|
|   0 | 1 | 2 | 1000 |
|   1 | 2 | 3 | 1003 |
|   2 | 3 | 4 | 1004 |
|   3 |   |   |      |
| ... |   |   |      |
|     |   |   |      |


こんな感じで計算していくとしても 1000, 1003, 1004 は早い段階で縦列に埋まってしまっている。
妥協して一番大きい要素が20000回選ばれるケースまで洗いざらいやるとしたら・・・。
それは計算しすぎだ。もう少し小さく抑えたい。
求める数は、一番小さい要素を20000回選んだ数値よりは小さいはずだ。それを上限として計算しまくればいけるか？
しかし Ai は 10^9 という容赦ない数なので、そこを上限とするのはかなり苦しい。

* ちょっと発想変えてみよう。

A はソート済みとする。

A = 20 25 30 100

A0 を選ぶ。

ai = 1
pati = 0
pat = 20

次に、A[ai] と pat[pati] + A[0] を戦わせる。
A[ai] が勝利した。

ai = 2
pati = 0
pat = 20 25

次に、A[ai] と pat[pati] + A[0] を戦わせる。
A[ai] が勝利した。

ai = 3
pati = 0
pat = 20 25 30

次に、A[ai] と pat[pati] + A[0] を戦わせる。
pat[pati] + A[0] が勝利した。

ai = 3
pat = 20 25 30 40

* 再帰的に計算したい

1step 目は A[0] をリストの末尾に追加

kstep 目はリストの末尾より少し大きな数を探す。
そのためには N 個の候補と対応する10要素をリストからピックアップする。
ピックアップは、末尾の数より少し大きくなるところから選ぶ。
2分探索でやれる。

たとえば LIST = 20 25 30 ができているとしよう。
このときに、 A[0] = 20 なので 30 - 20 より大きい数を探す。10 より大きい数として 20 が発見できる。よって 20 + 20 を計算して 40 を出す。

LIST = 20 25 30 40 ができているとしよう。

A[0] で検索すると、20より大きい数 25 が発見できる。よって A[0] の挿入候補は 45
A[1] で検索すると、15より大きい数 20 が発見できる。よって A[1] の挿入候補は 45
これを N までやる。

LIST = 20 25 30 40 45 ができているとしよう。

A[0] で検索すると、25より大きい数 30 が発見できる。よって A[0] の挿入候補は 50
A[1] で検索すると、20より大きい数 25 が発見できる。よって A[0] の挿入候補は 50

LIST = 20 25 30 40 45 50

A[0] で検索すると、30 より大きい数 40 が発見できる。よって A[0] の挿入候補は 60
A[1] で検索すると、25 より大きい数 30 が発見できる。よって A[0] の挿入候補は 55

いけそうな気がしてきた。

O(K * N * log(K))
