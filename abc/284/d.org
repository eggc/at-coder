正整数 N = p^2 * q を満たす。p, q を求めよ。これを T 回行え。

* まず1つ求めるにはどうしたらいいのかを考えてみよう。

N を素因数分解する。計算量はO(√N) である。
N = p1, p2, p3 ... pn とおく。
素因数の中に指数が 2 であるものが混ざっているので、それを p とおく。
p 以外の積を計算して q とおく。
これは素数を一回ループすればいいので計算量はO(√N) より小さいはず。

それでも N = 9 * 10^18 なので最悪 3 * 10^9 かかる。

* もっと少ない計算量でやるにはどうしたらいいか。

N = p^2 * q と書けるので試し割りする数はルート N よりも小さくできるはず。

** p < q の場合を考える

p < q
p^3 < p^2 * q
p^3 < N

よって p は少なくとも N の三乗根よりは小さい。

** q < p の場合を考える

q < p
p * q^2 < p^2 * q
p * q^2 < N

よって q は少なくとも N の三乗根よりは小さい。

** つまり

試し割り法を使う場合でも
Nは三乗根まで探索するだけでOK。

N = 9 * 10^18 の三乗根は 2080083 なので 10^6 オーダーで済む。

* 間違っていた

最大値の議論が多分違うんだと思う

出現しうる最大の素数は

N = 4 * p

p = N/4 とかかなぁ。でもその場合もすぐ発見できる 2^2 が見つかったらすぐ発見できる。
だから今のアルゴリズムでは発見できない何かがあるっぽい。

今のアルゴリズムだと、p, q が近い数になってる方が発見しにくい
仮に p=q だとしたら N= p^3 だからやはり三乗根で見つからないなら発見できないものと思う。

模範解答みてわかったけど N = p^2 * 2 というのが検出ができないケースだった。
ぐがががが😢
