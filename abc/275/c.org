* 前提

添字は一個ずつずらす (0,0) - (8,8) が対象。


* 全探索

盤面の大きさが 9x9 なので全探索できるかもしれない。

座標の数は (0,0)...(8,8) なので 81個。
4点のとり方は 81 から 4 個選ぶ組み合わせだ。

(1..81).to_a.combination(4).size => 1663740

160万通りか…ギリギリ計算できそうな気もする

その中には正方形ではないものが含まれてしまっている。

* 正方形だけ探索できないだろうか。

大きさ1の正方形は (0,0) から順番に作っていく。(7,7) まで。
大きさ2の正方形は (0,0) から順番に作っていく。(6,6) まで。
大きさ3の正方形は (0,0) から順番に作っていく。(5,5) まで。
...
同じようにして計算すれば全探索よりはるかに小さい計算量になる。
そして判定はそこにポーンがあるかどうか調べるだけ。

* 勘違いしていた
下のやつも正方形なのか…。

..#.
#...
...#
.#..

斜めの直線を探索することはできないから、# があるところを起点に探索するのが良い気はする。

* ポーンを全探索する

ポーンのあるところを4つ選んで、それぞれの距離が一致してればそれは正方形なのかな
距離の条件だけでは足りてなくて、距離が等しいだけだとひし形の可能性がある
うーん辛いが「正方形の対角線は長さが等しく、垂直に交わる」というのを使えばいいのかな
ひし形作れるのかな

....#....
#.......#
....#....

これは各辺の長さは等しい。

距離の長さはどうやってチェックするんだろう。
まあ引き算とかでいいか。

角度は下記のコードで計算できるっぽい。

Math.atan2(x1-x2, y1-y2) / Math::PI * 180


対角線ってどうやって出すんだ…。
4点がどういう構成かもわからんしな。
点の順番が4角形を構成する順番とは限らないし、色々考えることが多すぎる。
おかしい。正方形のとき面積に特徴があるとかか？


#..#
#..#

こんなのは正方形じゃないしな。なんだろうまじでわからない。
正方形の種類は限られているのかもしれない

マス

##
##

ダイヤ

.#.
#.#
.#.

斜め1

..#.
#...
...#
.#..

斜め2

.#..
...#
#...
..#.

これらを探索する事を考えてみたらどうだろう。
それでもプログラムはかなり複雑なものになる。
単に作問が良くないだけだろうか。
答えを待とう。

* 模範解答

正方形をどのように考えるのかという定番の考え方として
まず2点A,B をとり「頂点を右回りに見る」ということをする。
そうすると、2点を含む正方形はおのずと決定し、C、Dは計算により導く。
A, B の x 成分の差と、y 成分の差を加減算するだけでよい。
その証明は解説の図を見るのが手っ取り早い。

https://atcoder.jp/contests/abc275/editorial/5141

重複が起きないように取り除く必要はある。
