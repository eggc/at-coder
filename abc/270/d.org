* 案
とりあえずいま選ぶことのできる一番高い数字を選ぶのが最善手


石が 1000 で選択肢 100 とかだったとすると 100 * 1000 回の計算が必要だけどそんなに重いかね？


たとえば駄目なケース

石 = 160 個
選択肢 = 1 50 60

これかぁ・・・やすいのを2回選択したほうが良いことがあるまれに。
残りの石が number2 * 2 + number1 のときはこの作戦使うべきなのか

* 模範解答

上記の方法は利用できない。全探索によって求めることを考えなければならない。

aoki と takahashi の和は常に N になる。
最適戦略は高橋は takahashi を最大化、青木は takahashi を最小化する。
部分和問題のような複雑さを持っている。

全探索するためにゲーム木を考えてみる
node は石の個数

高橋 160
      |    \     \
青木 159   110   100
      | \    \      \
     ...

これは選択肢が3つあるのでノードの数は 3^n
各ノードの評価値(N - takahashi)を出していくのが理想。
minimax 法のようなイメージ。

最善手 f(turn, N) は常に同じ値を変えすべきなのでメモ化再帰を使える。


DP でやる場合

dp[高橋 or 青木][山の石の数] = 高橋のポイント

dp[高橋][j] = 高橋のすべての行動のうちポイントを最大化できるAk について dp[高橋][j-Ak] + Ak
dp[青木][j] = 高橋のすべての行動のうちポイントを最小化できるAk について dp[青木][j-Ak]


N = 10
A = { 1, 3, 4 }

| i\j  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |      10 |
|------+---+---+---+---+---+---+---+---+---+---+---------|
| 高橋 | 0 | 1 | 1 | 3 | 4 | 4 | 5 | 4 | 4 | 5 | 6(goal) |
| 青木 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 3 | 4 | 4 |       4 |

O(NK) なので高速
