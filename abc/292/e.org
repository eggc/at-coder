* 問題
- 単純有向グラフが与えられる。
  - 単純グラフは、多重辺やループを持たない物を指している。
- 最終系になるまで操作を0回以上行うことができる。
- 操作： 2つの異なる頂点に有向辺を追加する。
- 最終系：3つの異なる頂点a,b,cについて a→b かつ b→c ならば a→c である。(推移性が成り立つ)
- 最終系になるまでの操作回数をもとめよ。

  N = 2000, M = 2000

* 例

2→4→3→1

このグラフには 2→3, 4→1 を追加したら良い。すると下記が成り立つようになる。

2→3→1

よって 2→1 も追加しなければならない。

* 考察

連結成分が一個しかない場合を考えよう。
このようなものについてはその連結成分に含まれる辺を列挙する。

@queue = [
  x1→y1,
  x2→y2,
  ...
]

そして辺 x1→y1 をみて y1→nodes が存在するなら x1→nodes がないなら追加する。
追加した辺は辺リストの末尾に加える。
これを繰り返して @queue の末尾まで探索できたら終わりにする。
このときの計算量は O(|E|^2) じゃないのかなぁ…わからん。

連結成分ごとに同じ計算して和を取れば求める答えが得られるはず…。

* 欠陥

追加した辺をうまく処理することが難しい。
条件を満たしているのか確かめるには、計算を最初からやり直ししないといけない。
それは無限ループになりかなり大変そうだ。O(|E|^3) とか？　わからん。

無限ループだけど同じ計算を省略できれば結構早いはずだ。
再計算しなくていいものはマーカーをつけるとかでどうかな？
→いけそう
→実装してみたら TLE で3つ落ちた。

別案：多くとも N = 2000 しかないから N の３項組を事前に全部並べとけば良いんじゃないか。→ 2000 C 3 = 10億だから無理そう。

* 模範解答

シミュレーションせずとも解を出す方法がある。実は下記の性質がある。

- 最終系グラフに辺 x→y があるとする。
- y は、xから初期状態で到達可能なすべての頂点である。

証明：

1. 操作では、x から到達可能な頂点は増えない。
2. 操作を終えた時 x→?→y なる点で x→y でない点は存在しない。
3. 以上のことから x から初期状態で到達可能なすべての頂点が y である。

この性質を利用すると

1. グラフの連結成分を調べる
2. 連結成分 C に属する全頂点がそれぞれ有向辺を持つものとして考えると
   頂点を2個選ぶ順列の数と同じだから edge_size = C.size * (C.size - 1)
3. 最後に edge_size の総和からすでに用意していた辺の数を引けば答えになる

実装してみよう
